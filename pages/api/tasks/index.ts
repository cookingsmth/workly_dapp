// pages/api/tasks/index.ts - –° –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ–∑–≤—Ä–∞—Ç–æ–º –¥–µ–Ω–µ–≥ –∏ —É–¥–∞–ª–µ–Ω–∏–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
import { NextApiRequest, NextApiResponse } from 'next'
import jwt from 'jsonwebtoken'
import { z } from 'zod'
import fs from 'fs'
import path from 'path'

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
const createTaskSchema = z.object({
    title: z.string().min(5, 'Title must be at least 5 characters').max(100, 'Title too long'),
    description: z.string().min(10, 'Description must be at least 10 characters').max(2000, 'Description too long'),
    reward: z.object({
        amount: z.number().positive('Reward amount must be positive'),
        token: z.string().min(1, 'Token is required')
    }),
    deadline: z.string().refine((val) => !isNaN(Date.parse(val)), {
        message: 'Invalid deadline format'
    }),
    tags: z.array(z.string()).optional(),
    isUrgent: z.boolean().optional(),
    requirements: z.array(z.string()).optional()
})

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö
const getTasksFilePath = () => path.join(process.cwd(), 'data', 'tasks.json')
const getUsersFilePath = () => path.join(process.cwd(), 'data', 'users.json')
const getEscrowAccountsFilePath = () => path.join(process.cwd(), 'data', 'escrow_accounts.json')
const getPendingEscrowsFilePath = () => path.join(process.cwd(), 'data', 'pending_escrows.json')
const getWalletTransactionsFilePath = () => path.join(process.cwd(), 'data', 'wallet_transactions.json')
const getWalletsFilePath = () => path.join(process.cwd(), 'data', 'wallets.json')

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const ensureDataDir = () => {
    const dataDir = path.join(process.cwd(), 'data')
    if (!fs.existsSync(dataDir)) {
        fs.mkdirSync(dataDir, { recursive: true })
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
const loadTasks = () => {
    ensureDataDir()
    const filePath = getTasksFilePath()
    if (!fs.existsSync(filePath)) return []
    try {
        const data = fs.readFileSync(filePath, 'utf8')
        return JSON.parse(data)
    } catch (error) {
        console.error('Error loading tasks:', error)
        return []
    }
}

const saveTasks = (tasks: any[]) => {
    ensureDataDir()
    const filePath = getTasksFilePath()
    try {
        fs.writeFileSync(filePath, JSON.stringify(tasks, null, 2))
    } catch (error) {
        console.error('Error saving tasks:', error)
        throw new Error('Failed to save task data')
    }
}

const loadEscrowAccounts = () => {
    ensureDataDir()
    const filePath = getEscrowAccountsFilePath()
    if (!fs.existsSync(filePath)) return []
    try {
        const data = fs.readFileSync(filePath, 'utf8')
        return JSON.parse(data)
    } catch (error) {
        console.error('Error loading escrow accounts:', error)
        return []
    }
}

const saveEscrowAccounts = (escrows: any[]) => {
    ensureDataDir()
    const filePath = getEscrowAccountsFilePath()
    try {
        fs.writeFileSync(filePath, JSON.stringify(escrows, null, 2))
    } catch (error) {
        console.error('Error saving escrow accounts:', error)
        throw new Error('Failed to save escrow data')
    }
}

const loadPendingEscrows = () => {
    ensureDataDir()
    const filePath = getPendingEscrowsFilePath()
    if (!fs.existsSync(filePath)) return []
    try {
        const data = fs.readFileSync(filePath, 'utf8')
        return JSON.parse(data)
    } catch (error) {
        console.error('Error loading pending escrows:', error)
        return []
    }
}

const savePendingEscrows = (escrows: any[]) => {
    ensureDataDir()
    const filePath = getPendingEscrowsFilePath()
    try {
        fs.writeFileSync(filePath, JSON.stringify(escrows, null, 2))
    } catch (error) {
        console.error('Error saving pending escrows:', error)
        throw new Error('Failed to save pending escrow data')
    }
}

const loadWallets = () => {
    ensureDataDir()
    const filePath = getWalletsFilePath()
    if (!fs.existsSync(filePath)) return []
    try {
        const data = fs.readFileSync(filePath, 'utf8')
        return JSON.parse(data)
    } catch (error) {
        console.error('Error loading wallets:', error)
        return []
    }
}

const saveWallets = (wallets: any[]) => {
    ensureDataDir()
    const filePath = getWalletsFilePath()
    try {
        fs.writeFileSync(filePath, JSON.stringify(wallets, null, 2))
    } catch (error) {
        console.error('Error saving wallets:', error)
        throw new Error('Failed to save wallet data')
    }
}

const loadWalletTransactions = () => {
    ensureDataDir()
    const filePath = getWalletTransactionsFilePath()
    if (!fs.existsSync(filePath)) return []
    try {
        const data = fs.readFileSync(filePath, 'utf8')
        return JSON.parse(data)
    } catch (error) {
        console.error('Error loading wallet transactions:', error)
        return []
    }
}

const saveWalletTransactions = (transactions: any[]) => {
    ensureDataDir()
    const filePath = getWalletTransactionsFilePath()
    try {
        fs.writeFileSync(filePath, JSON.stringify(transactions, null, 2))
    } catch (error) {
        console.error('Error saving wallet transactions:', error)
        throw new Error('Failed to save transaction data')
    }
}

const loadUsers = () => {
    const filePath = getUsersFilePath()
    if (!fs.existsSync(filePath)) return []
    try {
        const data = fs.readFileSync(filePath, 'utf8')
        return JSON.parse(data)
    } catch (error) {
        console.error('Error loading users:', error)
        return []
    }
}

// üéØ –§–£–ù–ö–¶–ò–Ø –í–û–ó–í–†–ê–¢–ê –î–ï–ù–ï–ì –° ESCROW
const refundMoneyFromEscrow = async (taskId: string, clientId: string) => {
    try {
        console.log(`üí∞ Starting refund process for task ${taskId}`)

        // –ò—â–µ–º escrow –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
        let escrowAccounts = loadEscrowAccounts()
        let pendingEscrows = loadPendingEscrows()
        let wallets = loadWallets()
        let transactions = loadWalletTransactions()

        // –ù–∞–π—Ç–∏ escrow –¥–ª—è –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        const escrowIndex = escrowAccounts.findIndex(escrow =>
            escrow.taskId === taskId && escrow.status === 'funded'
        )

        const pendingIndex = pendingEscrows.findIndex(escrow =>
            escrow.taskId === taskId || (escrow.taskData && escrow.taskData.createdBy === clientId)
        )

        let refundAmount = 0
        let refundToken = ''
        let escrowToRemove = null

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ escrow (—Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'funded')
        if (escrowIndex !== -1) {
            const escrow = escrowAccounts[escrowIndex]
            refundAmount = escrow.amount // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑—á–∏–∫—É
            refundToken = escrow.token
            escrowToRemove = escrow

            console.log(`üí∏ Found funded escrow: ${refundAmount} ${refundToken}`)

            // –£–¥–∞–ª—è–µ–º escrow –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            escrowAccounts.splice(escrowIndex, 1)
            saveEscrowAccounts(escrowAccounts)
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞—é—â–µ–≥–æ escrow (pending_payment)
        else if (pendingIndex !== -1) {
            const pendingEscrow = pendingEscrows[pendingIndex]
            refundAmount = pendingEscrow.amount || pendingEscrow.taskData?.reward?.amount || 0
            refundToken = pendingEscrow.token || pendingEscrow.taskData?.reward?.token || 'SOL'
            escrowToRemove = pendingEscrow

            console.log(`‚è≥ Found pending escrow: ${refundAmount} ${refundToken}`)

            // –£–¥–∞–ª—è–µ–º –∏–∑ pending (–¥–µ–Ω—å–≥–∏ –µ—â–µ –Ω–µ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã)
            pendingEscrows.splice(pendingIndex, 1)
            savePendingEscrows(pendingEscrows)
        }

        // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω escrow –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        if (escrowToRemove && refundAmount > 0) {
            // –ù–∞—Ö–æ–¥–∏–º –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const walletIndex = wallets.findIndex(wallet => wallet.userId === clientId)

            if (walletIndex !== -1) {
                const wallet = wallets[walletIndex]

                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                switch (refundToken.toUpperCase()) {
                    case 'SOL':
                        wallet.solBalance += refundAmount
                        break
                    case 'USDT':
                        wallet.usdtBalance += refundAmount
                        break
                    case 'USDC':
                        wallet.usdcBalance += refundAmount
                        break
                    case 'WORKLY':
                        wallet.worklyBalance += refundAmount
                        break
                    default:
                        console.warn(`Unknown token type: ${refundToken}`)
                        return false
                }

                wallet.lastUpdated = new Date().toISOString()

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
                saveWallets(wallets)

                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤–æ–∑–≤—Ä–∞—Ç–∞
                const refundTransaction = {
                    id: Date.now().toString(),
                    type: 'task_refund',
                    userId: clientId,
                    taskId: taskId,
                    escrowAddress: escrowToRemove.escrowAddress,
                    amount: refundAmount,
                    token: refundToken,
                    timestamp: new Date().toISOString(),
                    description: `Refund for expired/deleted task ${taskId}`
                }

                transactions.push(refundTransaction)
                saveWalletTransactions(transactions)

                console.log(`‚úÖ Successfully refunded ${refundAmount} ${refundToken} to user ${clientId}`)
                return true
            } else {
                console.error(`‚ùå Wallet not found for user ${clientId}`)
                return false
            }
        } else {
            console.log(`‚ÑπÔ∏è No escrow found for task ${taskId} - no refund needed`)
            return true // –ù–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç escrow –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        }

    } catch (error) {
        console.error('‚ùå Error during refund process:', error)
        return false
    }
}

// üéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò –£–î–ê–õ–ï–ù–ò–ï –ü–†–û–°–†–û–ß–ï–ù–ù–´–• –ó–ê–î–ê–ß –° –í–û–ó–í–†–ê–¢–û–ú –î–ï–ù–ï–ì
const updateAndCleanupExpiredTasks = async (tasks: any[]) => {
    const now = new Date()
    let hasChanges = false
    let deletedCount = 0
    let refundedCount = 0

    const tasksToKeep = []

    for (const task of tasks) {
        // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –æ—Ç–∫—Ä—ã—Ç–∞, –Ω–æ –¥–µ–¥–ª–∞–π–Ω –ø—Ä–æ—à–µ–ª
        if (task.status === 'open' && new Date(task.deadline) <= now) {
            console.log(`üïí Task ${task.id} expired, processing refund and deletion...`)

            // –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏
            const refundSuccess = await refundMoneyFromEscrow(task.id, task.createdBy)

            if (refundSuccess) {
                refundedCount++
                console.log(`‚úÖ Refund completed for task ${task.id}`)
            } else {
                console.warn(`‚ö†Ô∏è Refund failed for task ${task.id}`)
            }

            // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ tasksToKeep)
            deletedCount++
            hasChanges = true

            console.log(`üóëÔ∏è Task ${task.id} deleted`)
        } else {
            // –ó–∞–¥–∞—á–∞ –æ—Å—Ç–∞–µ—Ç—Å—è
            tasksToKeep.push(task)
        }
    }

    if (hasChanges) {
        console.log(`üßπ Cleanup complete: ${deletedCount} tasks deleted, ${refundedCount} refunds processed`)
    }

    return {
        updatedTasks: tasksToKeep,
        hasChanges,
        deletedCount,
        refundedCount
    }
}

// üéØ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –¢–û–õ–¨–ö–û –ê–ö–¢–£–ê–õ–¨–ù–´–• –ó–ê–î–ê–ß –î–õ–Ø –ü–£–ë–õ–ò–ß–ù–û–ì–û –ü–†–û–°–ú–û–¢–†–ê
const getPublicTasks = (tasks: any[], currentUserId?: string) => {
    return tasks
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserFromToken = (authHeader: string | undefined) => {
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return null
    }

    const token = authHeader.split(' ')[1]

    try {
        const decoded = jwt.verify(
            token,
            process.env.JWT_SECRET || 'workly-local-secret-key-2025'
        ) as { userId: string }

        const users = loadUsers()
        const user = users.find((u: any) => u.id === decoded.userId)

        if (!user) return null

        return {
            id: user.id,
            username: user.username,
            email: user.email
        }
    } catch (error) {
        return null
    }
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
    const { method } = req

    if (method === 'GET') {
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            let tasks = loadTasks()

            // üéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –û–ë–ù–û–í–õ–Ø–ï–ú –ò –£–î–ê–õ–Ø–ï–ú –ü–†–û–°–†–û–ß–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò –° –í–û–ó–í–†–ê–¢–û–ú –î–ï–ù–ï–ì
            const { updatedTasks, hasChanges, deletedCount, refundedCount } = await updateAndCleanupExpiredTasks(tasks)
            tasks = updatedTasks

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if (hasChanges) {
                saveTasks(tasks)
                console.log(`‚úÖ Cleanup completed: ${deletedCount} expired tasks deleted, ${refundedCount} refunds processed`)
            }

            // üéØ –§–ò–õ–¨–¢–†–£–ï–ú –¢–û–õ–¨–ö–û –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ó–ê–î–ê–ß–ò –î–õ–Ø –ü–£–ë–õ–ò–ß–ù–û–ì–û –ü–†–û–°–ú–û–¢–†–ê
            const publicTasks = getPublicTasks(tasks)

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            publicTasks.sort((a: any, b: any) =>
                new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
            )

            res.status(200).json({
                success: true,
                tasks: publicTasks,
                total: publicTasks.length,
                totalAll: tasks.length,
                cleanup: {
                    deletedTasks: deletedCount,
                    refundsProcessed: refundedCount
                }
            })

        } catch (error) {
            console.error('Get tasks error:', error)
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to get tasks'
            })
        }

    } else if (method === 'POST') {
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            const user = getUserFromToken(req.headers.authorization)

            if (!user) {
                return res.status(401).json({
                    error: 'Unauthorized',
                    message: 'Authentication required to create tasks'
                })
            }

            console.log('üî• req.body =', req.body)
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            const validation = createTaskSchema.safeParse(req.body)

            if (!validation.success) {
                console.error('‚ùå Zod validation error:', validation.error.errors)
                return res.status(400).json({
                    error: 'Validation failed',
                    details: validation.error.errors
                })
            }

            const taskData = validation.data

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ deadline –≤ –±—É–¥—É—â–µ–º
            const deadlineDate = new Date(taskData.deadline)
            if (deadlineDate <= new Date()) {
                return res.status(400).json({
                    error: 'Invalid deadline',
                    message: 'Deadline must be in the future'
                })
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            const newTask = {
                id: Date.now().toString(),
                title: taskData.title.trim(),
                description: taskData.description.trim(),
                reward: taskData.reward,
                deadline: taskData.deadline,
                tags: taskData.tags || [],
                isUrgent: taskData.isUrgent || false,
                requirements: Array.isArray(taskData.requirements) ? taskData.requirements : [],
                status: 'open',
                createdBy: user.id,
                createdByUsername: user.username,
                assignedTo: null,
                applicants: [],
                applicationCount: 0,
                viewCount: 0,
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
            const tasks = loadTasks()
            tasks.push(newTask)
            saveTasks(tasks)

            res.status(201).json({
                success: true,
                message: 'Task created successfully',
                task: newTask
            })

        } catch (error) {
            console.error('Create task error:', error)
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to create task'
            })
        }

    } else {
        // –ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        res.status(405).json({
            error: 'Method not allowed',
            message: `Method ${method} is not supported on this endpoint`
        })
    }
}