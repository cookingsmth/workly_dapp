"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/profile";
exports.ids = ["pages/api/profile"];
exports.modules = {

/***/ "jsonwebtoken":
/*!*******************************!*\
  !*** external "jsonwebtoken" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("jsonwebtoken");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./pages/api/profile.ts":
/*!******************************!*\
  !*** ./pages/api/profile.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__);\n// pages/api/profile.ts - Переписанный API для профиля и настроек\n\n\n\n// Пути к файлам\nconst getUsersFilePath = ()=>path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"users.json\");\nconst getProfilesFilePath = ()=>path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"profiles.json\");\nconst getSettingsFilePath = ()=>path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"settings.json\");\n// Функции загрузки данных\nconst loadUsers = ()=>{\n    const filePath = getUsersFilePath();\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(filePath)) return [];\n    try {\n        const data = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(filePath, \"utf8\");\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error loading users:\", error);\n        return [];\n    }\n};\nconst loadProfiles = ()=>{\n    const filePath = getProfilesFilePath();\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(filePath)) return [];\n    try {\n        const data = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(filePath, \"utf8\");\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error loading profiles:\", error);\n        return [];\n    }\n};\nconst loadSettings = ()=>{\n    const filePath = getSettingsFilePath();\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(filePath)) return [];\n    try {\n        const data = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(filePath, \"utf8\");\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error loading settings:\", error);\n        return [];\n    }\n};\n// Функции сохранения данных\nconst saveProfiles = (profiles)=>{\n    const filePath = getProfilesFilePath();\n    const dir = path__WEBPACK_IMPORTED_MODULE_1___default().dirname(filePath);\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(dir)) {\n        fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(dir, {\n            recursive: true\n        });\n    }\n    fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(filePath, JSON.stringify(profiles, null, 2));\n};\nconst saveSettings = (settings)=>{\n    const filePath = getSettingsFilePath();\n    const dir = path__WEBPACK_IMPORTED_MODULE_1___default().dirname(filePath);\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(dir)) {\n        fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(dir, {\n            recursive: true\n        });\n    }\n    fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(filePath, JSON.stringify(settings, null, 2));\n};\nconst saveUsers = (users)=>{\n    const filePath = getUsersFilePath();\n    fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(filePath, JSON.stringify(users, null, 2));\n};\n// Функции аутентификации\nconst verifyToken = (token)=>{\n    try {\n        const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_2___default().verify(token, process.env.JWT_SECRET || \"workly-local-secret-key-2025\");\n        return decoded;\n    } catch (error) {\n        return null;\n    }\n};\nconst getUserFromToken = (authHeader)=>{\n    if (!authHeader || !authHeader.startsWith(\"Bearer \")) return null;\n    const token = authHeader.split(\" \")[1];\n    const decoded = verifyToken(token);\n    if (!decoded) return null;\n    try {\n        const users = loadUsers();\n        const user = users.find((u)=>u.id === decoded.userId);\n        if (!user) return null;\n        return {\n            id: user.id,\n            username: user.username,\n            email: user.email,\n            createdAt: user.createdAt\n        };\n    } catch (error) {\n        return null;\n    }\n};\n// Создание дефолтного профиля\nconst createDefaultProfile = (user)=>{\n    const now = new Date().toISOString();\n    return {\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        name: user.username,\n        firstName: \"\",\n        lastName: \"\",\n        bio: \"\",\n        skills: [],\n        hourlyRate: 0,\n        location: \"\",\n        website: \"\",\n        github: \"\",\n        linkedin: \"\",\n        twitter: \"\",\n        avatar: \"\",\n        rating: 4.5,\n        completedProjects: 0,\n        totalEarnings: 0,\n        joinedAt: user.createdAt || now,\n        verifiedEmail: false,\n        verifiedPhone: false,\n        notifications: {\n            email: true,\n            push: true,\n            newTasks: true,\n            taskUpdates: true,\n            messages: true,\n            marketing: false\n        },\n        privacy: {\n            profileVisibility: \"public\",\n            showEmail: false,\n            showStats: true,\n            showCompletedTasks: true\n        },\n        preferences: {\n            theme: \"dark\",\n            language: \"en\",\n            timezone: \"UTC\",\n            currency: \"USD\"\n        },\n        createdAt: user.createdAt || now,\n        updatedAt: now\n    };\n};\n// Объединение данных из разных источников\nconst mergeProfileData = (profile, settings, user)=>{\n    const defaultProfile = createDefaultProfile(user);\n    if (!profile && !settings) {\n        return defaultProfile;\n    }\n    // Объединяем данные с приоритетом: settings > profile > default\n    const merged = {\n        ...defaultProfile,\n        ...profile,\n        ...settings,\n        // Гарантируем обязательные поля\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        skills: profile?.skills || settings?.skills || [],\n        rating: profile?.rating || settings?.rating || 4.5,\n        completedProjects: profile?.completedProjects || 0,\n        totalEarnings: profile?.totalEarnings || 0,\n        verifiedEmail: profile?.verifiedEmail || false,\n        verifiedPhone: profile?.verifiedPhone || false,\n        notifications: {\n            ...defaultProfile.notifications,\n            ...profile?.notifications || {},\n            ...settings?.notifications || {}\n        },\n        privacy: {\n            ...defaultProfile.privacy,\n            ...profile?.privacy || {},\n            ...settings?.privacy || {}\n        },\n        preferences: {\n            ...defaultProfile.preferences,\n            ...profile?.preferences || {},\n            ...settings?.preferences || {}\n        }\n    };\n    return merged;\n};\n// Фильтрация обновлений\nconst filterUpdates = (updates)=>{\n    const filtered = {};\n    // Профильные поля\n    const profileFields = [\n        \"firstName\",\n        \"lastName\",\n        \"bio\",\n        \"skills\",\n        \"hourlyRate\",\n        \"location\",\n        \"website\",\n        \"github\",\n        \"linkedin\",\n        \"twitter\",\n        \"avatar\",\n        \"rating\",\n        \"completedProjects\",\n        \"totalEarnings\",\n        \"verifiedEmail\",\n        \"verifiedPhone\"\n    ];\n    // Настроечные поля\n    const settingsFields = [\n        \"name\",\n        \"username\",\n        \"notifications\",\n        \"privacy\",\n        \"preferences\"\n    ];\n    // Копируем только валидные поля\n    const allFields = [\n        ...profileFields,\n        ...settingsFields\n    ];\n    allFields.forEach((field)=>{\n        if (updates[field] !== undefined) {\n            filtered[field] = updates[field];\n        }\n    });\n    return filtered;\n};\nasync function handler(req, res) {\n    const { method } = req;\n    // Аутентификация\n    const currentUser = getUserFromToken(req.headers.authorization);\n    if (!currentUser) {\n        return res.status(401).json({\n            error: \"Unauthorized\",\n            message: \"Authentication required\"\n        });\n    }\n    if (method === \"GET\") {\n        try {\n            const allProfiles = loadProfiles();\n            const allSettings = loadSettings();\n            const userProfile = allProfiles.find((p)=>p.id === currentUser.id) || null;\n            const userSettings = allSettings.find((s)=>s.id === currentUser.id) || null;\n            // Объединяем и возвращаем данные\n            const mergedProfile = mergeProfileData(userProfile, userSettings, currentUser);\n            // Если профиля не было, сохраняем созданный по умолчанию\n            if (!userProfile) {\n                allProfiles.push(mergedProfile);\n                saveProfiles(allProfiles);\n            }\n            if (!userSettings) {\n                allSettings.push(mergedProfile);\n                saveSettings(allSettings);\n            }\n            res.status(200).json({\n                success: true,\n                profile: mergedProfile\n            });\n        } catch (error) {\n            console.error(\"Get profile error:\", error);\n            res.status(500).json({\n                error: \"Internal server error\",\n                message: \"Failed to get profile\"\n            });\n        }\n    } else if (method === \"PUT\") {\n        try {\n            const rawUpdates = req.body;\n            const updates = filterUpdates(rawUpdates);\n            // Валидация username\n            if (updates.username && updates.username !== currentUser.username) {\n                const users = loadUsers();\n                const existingUser = users.find((u)=>u.username === updates.username.toLowerCase() && u.id !== currentUser.id);\n                if (existingUser) {\n                    return res.status(400).json({\n                        error: \"Username already taken\",\n                        message: \"This username is already in use by another user\"\n                    });\n                }\n            }\n            const allProfiles = loadProfiles();\n            const allSettings = loadSettings();\n            const profileIndex = allProfiles.findIndex((p)=>p.id === currentUser.id);\n            const settingsIndex = allSettings.findIndex((s)=>s.id === currentUser.id);\n            const now = new Date().toISOString();\n            // Получаем текущие данные\n            const currentProfile = allProfiles[profileIndex] || null;\n            const currentSettings = allSettings[settingsIndex] || null;\n            // Создаем обновленный профиль\n            const updatedProfile = mergeProfileData(currentProfile, currentSettings, currentUser);\n            // Применяем обновления\n            Object.keys(updates).forEach((key)=>{\n                if (updates[key] !== undefined) {\n                    updatedProfile[key] = updates[key];\n                }\n            });\n            updatedProfile.updatedAt = now;\n            // Сохраняем в profiles\n            if (profileIndex === -1) {\n                allProfiles.push(updatedProfile);\n            } else {\n                allProfiles[profileIndex] = updatedProfile;\n            }\n            // Сохраняем в settings\n            if (settingsIndex === -1) {\n                allSettings.push(updatedProfile);\n            } else {\n                allSettings[settingsIndex] = updatedProfile;\n            }\n            saveProfiles(allProfiles);\n            saveSettings(allSettings);\n            // Обновляем username в users.json если изменился\n            if (updates.username && updates.username !== currentUser.username) {\n                const users = loadUsers();\n                const userIndex = users.findIndex((u)=>u.id === currentUser.id);\n                if (userIndex !== -1) {\n                    users[userIndex].username = updates.username.toLowerCase();\n                    saveUsers(users);\n                }\n            }\n            res.status(200).json({\n                success: true,\n                profile: updatedProfile\n            });\n        } catch (error) {\n            console.error(\"Update profile error:\", error);\n            res.status(500).json({\n                error: \"Internal server error\",\n                message: \"Failed to update profile\"\n            });\n        }\n    } else {\n        res.status(405).json({\n            error: \"Method not allowed\",\n            message: `Method ${method} is not supported`\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/profile.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/profile.ts"));
module.exports = __webpack_exports__;

})();