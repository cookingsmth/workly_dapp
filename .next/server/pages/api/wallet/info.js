"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/wallet/info";
exports.ids = ["pages/api/wallet/info"];
exports.modules = {

/***/ "@solana/web3.js":
/*!**********************************!*\
  !*** external "@solana/web3.js" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("@solana/web3.js");

/***/ }),

/***/ "jsonwebtoken":
/*!*******************************!*\
  !*** external "jsonwebtoken" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("jsonwebtoken");

/***/ }),

/***/ "bs58":
/*!***********************!*\
  !*** external "bs58" ***!
  \***********************/
/***/ ((module) => {

module.exports = import("bs58");;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./lib/wallet/walletService.ts":
/*!*************************************!*\
  !*** ./lib/wallet/walletService.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WalletService: () => (/* binding */ WalletService),\n/* harmony export */   walletService: () => (/* binding */ walletService)\n/* harmony export */ });\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"@solana/web3.js\");\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_solana_web3_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bs58 */ \"bs58\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([bs58__WEBPACK_IMPORTED_MODULE_1__]);\nbs58__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// lib/wallet/walletService.ts - Основной сервис кошельков\n\n\nclass WalletService {\n    constructor(rpcUrl = \"https://api.devnet.solana.com\"){\n        this.walletsFile = \"data/wallets.json\";\n        this.escrowsFile = \"data/escrow_accounts.json\";\n        this.transactionsFile = \"data/wallet_transactions.json\";\n        this.connection = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Connection(rpcUrl, \"confirmed\");\n    }\n    // Создание кошелька для нового пользователя\n    async createUserWallet(userId) {\n        const keypair = _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Keypair.generate();\n        const wallet = {\n            userId,\n            publicKey: keypair.publicKey.toString(),\n            privateKey: this.encryptPrivateKey(bs58__WEBPACK_IMPORTED_MODULE_1__[\"default\"].encode(keypair.secretKey)),\n            solBalance: 0,\n            usdtBalance: 0,\n            usdcBalance: 0,\n            worklyBalance: 0,\n            totalEarned: 0,\n            totalSpent: 0,\n            createdAt: new Date().toISOString(),\n            lastUpdated: new Date().toISOString()\n        };\n        await this.saveWallet(wallet);\n        // Логируем создание\n        await this.logTransaction({\n            type: \"wallet_created\",\n            userId,\n            walletAddress: wallet.publicKey,\n            timestamp: new Date().toISOString()\n        });\n        return wallet;\n    }\n    // Создание escrow адреса для задачи\n    async createTaskEscrow(taskId, clientId, amount, token) {\n        const escrowKeypair = _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Keypair.generate();\n        const platformFee = this.calculatePlatformFee(amount);\n        const netAmount = amount - platformFee;\n        const escrow = {\n            taskId,\n            escrowAddress: escrowKeypair.publicKey.toString(),\n            escrowPrivateKey: this.encryptPrivateKey(bs58__WEBPACK_IMPORTED_MODULE_1__[\"default\"].encode(escrowKeypair.secretKey)),\n            clientId,\n            amount,\n            token,\n            status: \"pending_payment\",\n            createdAt: new Date().toISOString(),\n            platformFee,\n            netAmount\n        };\n        await this.saveEscrow(escrow);\n        // Логируем создание escrow\n        await this.logTransaction({\n            type: \"escrow_created\",\n            userId: clientId,\n            taskId,\n            escrowAddress: escrow.escrowAddress,\n            amount,\n            token,\n            timestamp: new Date().toISOString()\n        });\n        return escrow;\n    }\n    // Проверка поступления средств на escrow\n    async checkEscrowFunding(escrowAddress) {\n        try {\n            const escrow = await this.getEscrowByAddress(escrowAddress);\n            if (!escrow || escrow.status !== \"pending_payment\") {\n                return false;\n            }\n            let balance = 0;\n            if (escrow.token === \"SOL\") {\n                balance = await this.connection.getBalance(new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(escrowAddress));\n                balance = balance / _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.LAMPORTS_PER_SOL;\n            }\n            // TODO: Добавить проверку для SPL токенов\n            // Проверяем, достаточно ли средств (с небольшой погрешностью)\n            if (balance >= escrow.amount * 0.99) {\n                await this.markEscrowAsFunded(escrowAddress);\n                return true;\n            }\n            return false;\n        } catch (error) {\n            console.error(\"Error checking escrow funding:\", error);\n            return false;\n        }\n    }\n    // Завершение задачи и перевод средств\n    async completeTaskAndTransfer(taskId, workerId) {\n        try {\n            const escrow = await this.getEscrowByTaskId(taskId);\n            if (!escrow || escrow.status !== \"funded\") {\n                return {\n                    success: false,\n                    error: \"Escrow not found or not funded\"\n                };\n            }\n            const workerWallet = await this.getUserWallet(workerId);\n            if (!workerWallet) {\n                return {\n                    success: false,\n                    error: \"Worker wallet not found\"\n                };\n            }\n            // Создаем транзакцию для перевода (только для SOL пока)\n            if (escrow.token === \"SOL\") {\n                const escrowKeypair = this.decryptPrivateKey(escrow.escrowPrivateKey);\n                const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction();\n                // Перевод SOL исполнителю\n                const workerTransfer = _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.SystemProgram.transfer({\n                    fromPubkey: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(escrow.escrowAddress),\n                    toPubkey: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(workerWallet.publicKey),\n                    lamports: Math.floor(escrow.netAmount * _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.LAMPORTS_PER_SOL)\n                });\n                transaction.add(workerTransfer);\n                const WORKLY_TREASURY_WALLET = \"25ZX5Cfc8Pxy7EnsvJ6JNbjbq4c8E9eFuPrzwjUabF4e\";\n                const platformTransfer = _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.SystemProgram.transfer({\n                    fromPubkey: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(escrow.escrowAddress),\n                    toPubkey: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(WORKLY_TREASURY_WALLET),\n                    lamports: Math.floor(escrow.platformFee * _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.LAMPORTS_PER_SOL)\n                });\n                transaction.add(platformTransfer);\n                const txHash = await (0,_solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.sendAndConfirmTransaction)(this.connection, transaction, [\n                    escrowKeypair\n                ], {\n                    commitment: \"confirmed\"\n                });\n                // Обновляем статус escrow\n                await this.markEscrowAsCompleted(escrow.escrowAddress, txHash);\n                // Обновляем балансы пользователей\n                await this.updateUserBalance(workerId, escrow.netAmount, escrow.token, \"earned\");\n                await this.updateUserBalance(escrow.clientId, escrow.amount, escrow.token, \"spent\");\n                // Начисляем WORKLY токены за завершение задачи\n                await this.rewardWorklyTokens(workerId, escrow.netAmount);\n                // Логируем транзакцию\n                await this.logTransaction({\n                    type: \"task_completed\",\n                    userId: workerId,\n                    taskId,\n                    amount: escrow.netAmount,\n                    token: escrow.token,\n                    txHash,\n                    timestamp: new Date().toISOString()\n                });\n                return {\n                    success: true,\n                    txHash\n                };\n            }\n            return {\n                success: false,\n                error: \"Only SOL transfers supported currently\"\n            };\n        } catch (error) {\n            console.error(\"Error completing task transfer:\", error);\n            return {\n                success: false,\n                error: \"Failed to transfer funds\"\n            };\n        }\n    }\n    // Начисление WORKLY токенов за активность\n    async rewardWorklyTokens(userId, earnedAmount) {\n        try {\n            // Формула: 1% от заработанной суммы в WORKLY токенах\n            const worklyReward = earnedAmount * 0.01;\n            const userWallet = await this.getUserWallet(userId);\n            if (userWallet) {\n                userWallet.worklyBalance += worklyReward;\n                userWallet.lastUpdated = new Date().toISOString();\n                await this.saveWallet(userWallet);\n                await this.logTransaction({\n                    type: \"workly_reward\",\n                    userId,\n                    amount: worklyReward,\n                    token: \"WORKLY\",\n                    timestamp: new Date().toISOString()\n                });\n            }\n        } catch (error) {\n            console.error(\"Error rewarding WORKLY tokens:\", error);\n        }\n    }\n    // Применение скидки WORKLY токена на комиссии\n    calculateDiscountedFee(amount, worklyBalance) {\n        const baseFee = this.calculatePlatformFee(amount);\n        if (worklyBalance >= 1000) {\n            return baseFee * 0.5 // 50% скидка\n            ;\n        } else if (worklyBalance >= 500) {\n            return baseFee * 0.7 // 30% скидка\n            ;\n        } else if (worklyBalance >= 100) {\n            return baseFee * 0.85 // 15% скидка\n            ;\n        }\n        return baseFee;\n    }\n    // Вспомогательные методы\n    calculatePlatformFee(amount) {\n        return amount * 0.025 // 2.5%\n        ;\n    }\n    encryptPrivateKey(privateKey) {\n        // В продакшене использовать реальное шифрование\n        return Buffer.from(privateKey).toString(\"base64\");\n    }\n    decryptPrivateKey(encryptedKey) {\n        // В продакшене использовать реальное расшифрование\n        const privateKey = Buffer.from(encryptedKey, \"base64\").toString();\n        return _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Keypair.fromSecretKey(bs58__WEBPACK_IMPORTED_MODULE_1__[\"default\"].decode(privateKey));\n    }\n    // Методы работы с файлами (заменить на БД в продакшене)\n    async saveWallet(wallet) {\n        const fs = __webpack_require__(/*! fs */ \"fs\");\n        const path = __webpack_require__(/*! path */ \"path\");\n        const filePath = path.join(process.cwd(), this.walletsFile);\n        const dir = path.dirname(filePath);\n        if (!fs.existsSync(dir)) {\n            fs.mkdirSync(dir, {\n                recursive: true\n            });\n        }\n        let wallets = [];\n        if (fs.existsSync(filePath)) {\n            try {\n                const data = fs.readFileSync(filePath, \"utf8\");\n                wallets = JSON.parse(data);\n            } catch (error) {\n                wallets = [];\n            }\n        }\n        const existingIndex = wallets.findIndex((w)=>w.userId === wallet.userId);\n        if (existingIndex >= 0) {\n            wallets[existingIndex] = wallet;\n        } else {\n            wallets.push(wallet);\n        }\n        fs.writeFileSync(filePath, JSON.stringify(wallets, null, 2));\n    }\n    async getUserWallet(userId) {\n        const fs = __webpack_require__(/*! fs */ \"fs\");\n        const path = __webpack_require__(/*! path */ \"path\");\n        const filePath = path.join(process.cwd(), this.walletsFile);\n        if (!fs.existsSync(filePath)) return null;\n        try {\n            const data = fs.readFileSync(filePath, \"utf8\");\n            const wallets = JSON.parse(data);\n            return wallets.find((w)=>w.userId === userId) || null;\n        } catch (error) {\n            return null;\n        }\n    }\n    async saveEscrow(escrow) {\n        const fs = __webpack_require__(/*! fs */ \"fs\");\n        const path = __webpack_require__(/*! path */ \"path\");\n        const filePath = path.join(process.cwd(), this.escrowsFile);\n        const dir = path.dirname(filePath);\n        if (!fs.existsSync(dir)) {\n            fs.mkdirSync(dir, {\n                recursive: true\n            });\n        }\n        let escrows = [];\n        if (fs.existsSync(filePath)) {\n            try {\n                const data = fs.readFileSync(filePath, \"utf8\");\n                escrows = JSON.parse(data);\n            } catch (error) {\n                escrows = [];\n            }\n        }\n        const existingIndex = escrows.findIndex((e)=>e.taskId === escrow.taskId);\n        if (existingIndex >= 0) {\n            escrows[existingIndex] = escrow;\n        } else {\n            escrows.push(escrow);\n        }\n        fs.writeFileSync(filePath, JSON.stringify(escrows, null, 2));\n    }\n    async getEscrowByAddress(escrowAddress) {\n        const fs = __webpack_require__(/*! fs */ \"fs\");\n        const path = __webpack_require__(/*! path */ \"path\");\n        const filePath = path.join(process.cwd(), this.escrowsFile);\n        if (!fs.existsSync(filePath)) return null;\n        try {\n            const data = fs.readFileSync(filePath, \"utf8\");\n            const escrows = JSON.parse(data);\n            return escrows.find((e)=>e.escrowAddress === escrowAddress) || null;\n        } catch (error) {\n            return null;\n        }\n    }\n    async getEscrowByTaskId(taskId) {\n        const fs = __webpack_require__(/*! fs */ \"fs\");\n        const path = __webpack_require__(/*! path */ \"path\");\n        const filePath = path.join(process.cwd(), this.escrowsFile);\n        if (!fs.existsSync(filePath)) return null;\n        try {\n            const data = fs.readFileSync(filePath, \"utf8\");\n            const escrows = JSON.parse(data);\n            return escrows.find((e)=>e.taskId === taskId) || null;\n        } catch (error) {\n            return null;\n        }\n    }\n    async markEscrowAsFunded(escrowAddress) {\n        const escrow = await this.getEscrowByAddress(escrowAddress);\n        if (escrow) {\n            escrow.status = \"funded\";\n            escrow.fundedAt = new Date().toISOString();\n            await this.saveEscrow(escrow);\n        }\n    }\n    async markEscrowAsCompleted(escrowAddress, txHash) {\n        const escrow = await this.getEscrowByAddress(escrowAddress);\n        if (escrow) {\n            escrow.status = \"completed\";\n            escrow.completedAt = new Date().toISOString();\n            await this.saveEscrow(escrow);\n        }\n    }\n    async updateUserBalance(userId, amount, token, type) {\n        const wallet = await this.getUserWallet(userId);\n        if (!wallet) return;\n        if (type === \"earned\") {\n            switch(token){\n                case \"SOL\":\n                    wallet.solBalance += amount;\n                    break;\n                case \"USDT\":\n                    wallet.usdtBalance += amount;\n                    break;\n                case \"USDC\":\n                    wallet.usdcBalance += amount;\n                    break;\n            }\n            wallet.totalEarned += amount;\n        } else if (type === \"spent\") {\n            wallet.totalSpent += amount;\n        } else if (type === \"withdrawn\") {\n            switch(token){\n                case \"SOL\":\n                    wallet.solBalance -= amount;\n                    break;\n                case \"USDT\":\n                    wallet.usdtBalance -= amount;\n                    break;\n                case \"USDC\":\n                    wallet.usdcBalance -= amount;\n                    break;\n            }\n        }\n        wallet.lastUpdated = new Date().toISOString();\n        await this.saveWallet(wallet);\n    }\n    async logTransaction(transaction) {\n        const fs = __webpack_require__(/*! fs */ \"fs\");\n        const path = __webpack_require__(/*! path */ \"path\");\n        const filePath = path.join(process.cwd(), this.transactionsFile);\n        const dir = path.dirname(filePath);\n        if (!fs.existsSync(dir)) {\n            fs.mkdirSync(dir, {\n                recursive: true\n            });\n        }\n        let transactions = [];\n        if (fs.existsSync(filePath)) {\n            try {\n                const data = fs.readFileSync(filePath, \"utf8\");\n                transactions = JSON.parse(data);\n            } catch (error) {\n                transactions = [];\n            }\n        }\n        transactions.push({\n            id: Date.now().toString(),\n            ...transaction\n        });\n        fs.writeFileSync(filePath, JSON.stringify(transactions, null, 2));\n    }\n    async syncWalletBalance(userId) {\n        try {\n            const wallet = await this.getUserWallet(userId);\n            if (!wallet) return null;\n            // Получаем реальный баланс SOL с блокчейна\n            const publicKey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(wallet.publicKey);\n            const balance = await this.connection.getBalance(publicKey);\n            const solBalance = balance / _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.LAMPORTS_PER_SOL;\n            // Обновляем баланс в локальных данных\n            wallet.solBalance = solBalance;\n            wallet.lastUpdated = new Date().toISOString();\n            // Сохраняем обновленный кошелек\n            await this.saveWallet(wallet);\n            console.log(`Updated balance for ${userId}: ${solBalance} SOL`);\n            return wallet;\n        } catch (error) {\n            console.error(\"Error syncing wallet balance:\", error);\n            return null;\n        }\n    }\n    // Публичные методы для API\n    async createWalletForUser(userId) {\n        return await this.createUserWallet(userId);\n    }\n    async getWalletInfo(userId) {\n        try {\n            // Сначала получаем кошелек из файла\n            let wallet = await this.getUserWallet(userId);\n            if (!wallet) return null;\n            // Синхронизируем баланс с блокчейном\n            wallet = await this.syncWalletBalance(userId);\n            return wallet;\n        } catch (error) {\n            console.error(\"Error getting wallet info:\", error);\n            return null;\n        }\n    }\n    async createTaskEscrowAddress(taskId, clientId, amount, token) {\n        return await this.createTaskEscrow(taskId, clientId, amount, token);\n    }\n    async checkTaskFunding(taskId) {\n        const escrow = await this.getEscrowByTaskId(taskId);\n        if (!escrow) return false;\n        return await this.checkEscrowFunding(escrow.escrowAddress);\n    }\n    async completeTask(taskId, workerId) {\n        return await this.completeTaskAndTransfer(taskId, workerId);\n    }\n    // Метод для вывода средств\n    async withdrawFunds(userId, amount, toAddress, token = \"SOL\") {\n        try {\n            const userWallet = await this.getUserWallet(userId);\n            if (!userWallet) {\n                return {\n                    success: false,\n                    error: \"User wallet not found\"\n                };\n            }\n            const currentBalance = userWallet.solBalance;\n            if (amount > currentBalance) {\n                return {\n                    success: false,\n                    error: \"Insufficient balance\"\n                };\n            }\n            try {\n                new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(toAddress);\n            } catch (e) {\n                return {\n                    success: false,\n                    error: \"Invalid Solana address\"\n                };\n            }\n            if (amount < 0.001) {\n                return {\n                    success: false,\n                    error: \"Minimum withdrawal amount is 0.001 SOL\"\n                };\n            }\n            const userKeypair = this.decryptPrivateKey(userWallet.privateKey);\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction();\n            const transfer = _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.SystemProgram.transfer({\n                fromPubkey: userKeypair.publicKey,\n                toPubkey: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(toAddress),\n                lamports: Math.floor(amount * _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.LAMPORTS_PER_SOL)\n            });\n            transaction.add(transfer);\n            const txHash = await (0,_solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.sendAndConfirmTransaction)(this.connection, transaction, [\n                userKeypair\n            ], {\n                commitment: \"confirmed\"\n            });\n            await this.updateUserBalance(userId, amount, token, \"withdrawn\");\n            await this.logTransaction({\n                type: \"withdrawal\",\n                userId,\n                amount,\n                token,\n                toAddress,\n                txHash,\n                timestamp: new Date().toISOString()\n            });\n            return {\n                success: true,\n                txHash\n            };\n        } catch (error) {\n            console.error(\"Error withdrawing funds:\", error);\n            return {\n                success: false,\n                error: \"Failed to process withdrawal\"\n            };\n        }\n    }\n    async forceRefreshWallet(userId) {\n        console.log(`Force refreshing wallet for user: ${userId}`);\n        return await this.syncWalletBalance(userId);\n    }\n    // Публичный метод для API\n    async processWithdrawal(userId, amount, toAddress) {\n        return await this.withdrawFunds(userId, amount, toAddress, \"SOL\");\n    }\n}\n// Экспортируем синглтон\nconst walletService = new WalletService();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/wallet/walletService.ts\n");

/***/ }),

/***/ "(api)/./pages/api/wallet/info.ts":
/*!**********************************!*\
  !*** ./pages/api/wallet/info.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_wallet_walletService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/wallet/walletService */ \"(api)/./lib/wallet/walletService.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_wallet_walletService__WEBPACK_IMPORTED_MODULE_1__]);\n_lib_wallet_walletService__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// pages/api/wallet/info.ts - API для получения информации о кошельке\n\n\nconst getUserFromToken = (authHeader)=>{\n    if (!authHeader || !authHeader.startsWith(\"Bearer \")) return null;\n    const token = authHeader.split(\" \")[1];\n    try {\n        const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default().verify(token, process.env.JWT_SECRET || \"workly-local-secret-key-2025\");\n        return decoded;\n    } catch (error) {\n        return null;\n    }\n};\nasync function handler(req, res) {\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    const user = getUserFromToken(req.headers.authorization);\n    if (!user) {\n        return res.status(401).json({\n            error: \"Unauthorized\"\n        });\n    }\n    try {\n        const wallet = await _lib_wallet_walletService__WEBPACK_IMPORTED_MODULE_1__.walletService.getWalletInfo(user.userId);\n        if (!wallet) {\n            return res.status(404).json({\n                error: \"Wallet not found\",\n                needsCreation: true\n            });\n        }\n        res.status(200).json({\n            success: true,\n            wallet: {\n                ...wallet,\n                privateKey: undefined // Не отправляем приватный ключ\n            }\n        });\n    } catch (error) {\n        console.error(\"Get wallet info error:\", error);\n        res.status(500).json({\n            error: \"Internal server error\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvd2FsbGV0L2luZm8udHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLHFFQUFxRTtBQUV2QztBQUNtQztBQUVqRSxNQUFNRSxtQkFBbUIsQ0FBQ0M7SUFDeEIsSUFBSSxDQUFDQSxjQUFjLENBQUNBLFdBQVdDLFVBQVUsQ0FBQyxZQUFZLE9BQU87SUFFN0QsTUFBTUMsUUFBUUYsV0FBV0csS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQ3RDLElBQUk7UUFDRixNQUFNQyxVQUFVUCwwREFBVSxDQUN4QkssT0FDQUksUUFBUUMsR0FBRyxDQUFDQyxVQUFVLElBQUk7UUFFNUIsT0FBT0o7SUFDVCxFQUFFLE9BQU9LLE9BQU87UUFDZCxPQUFPO0lBQ1Q7QUFDRjtBQUVlLGVBQWVDLFFBQVFDLEdBQW1CLEVBQUVDLEdBQW9CO0lBQzdFLElBQUlELElBQUlFLE1BQU0sS0FBSyxPQUFPO1FBQ3hCLE9BQU9ELElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFBRU4sT0FBTztRQUFxQjtJQUM1RDtJQUVBLE1BQU1PLE9BQU9qQixpQkFBaUJZLElBQUlNLE9BQU8sQ0FBQ0MsYUFBYTtJQUN2RCxJQUFJLENBQUNGLE1BQU07UUFDVCxPQUFPSixJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQUVOLE9BQU87UUFBZTtJQUN0RDtJQUVBLElBQUk7UUFDRixNQUFNVSxTQUFTLE1BQU1yQixvRUFBYUEsQ0FBQ3NCLGFBQWEsQ0FBQ0osS0FBS0ssTUFBTTtRQUU1RCxJQUFJLENBQUNGLFFBQVE7WUFDWCxPQUFPUCxJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO2dCQUMxQk4sT0FBTztnQkFDUGEsZUFBZTtZQUNqQjtRQUNGO1FBRUFWLElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFDbkJRLFNBQVM7WUFDVEosUUFBUTtnQkFDTixHQUFHQSxNQUFNO2dCQUNUSyxZQUFZQyxVQUFVLCtCQUErQjtZQUN2RDtRQUNGO0lBRUYsRUFBRSxPQUFPaEIsT0FBTztRQUNkaUIsUUFBUWpCLEtBQUssQ0FBQywwQkFBMEJBO1FBQ3hDRyxJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQUVOLE9BQU87UUFBd0I7SUFDeEQ7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3Rhc2tjaGFpbi11aS8uL3BhZ2VzL2FwaS93YWxsZXQvaW5mby50cz9iMzAxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHBhZ2VzL2FwaS93YWxsZXQvaW5mby50cyAtIEFQSSDQtNC70Y8g0L/QvtC70YPRh9C10L3QuNGPINC40L3RhNC+0YDQvNCw0YbQuNC4INC+INC60L7RiNC10LvRjNC60LVcclxuaW1wb3J0IHsgTmV4dEFwaVJlcXVlc3QsIE5leHRBcGlSZXNwb25zZSB9IGZyb20gJ25leHQnXHJcbmltcG9ydCBqd3QgZnJvbSAnanNvbndlYnRva2VuJ1xyXG5pbXBvcnQgeyB3YWxsZXRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vbGliL3dhbGxldC93YWxsZXRTZXJ2aWNlJ1xyXG5cclxuY29uc3QgZ2V0VXNlckZyb21Ub2tlbiA9IChhdXRoSGVhZGVyOiBzdHJpbmcgfCB1bmRlZmluZWQpID0+IHtcclxuICBpZiAoIWF1dGhIZWFkZXIgfHwgIWF1dGhIZWFkZXIuc3RhcnRzV2l0aCgnQmVhcmVyICcpKSByZXR1cm4gbnVsbFxyXG4gIFxyXG4gIGNvbnN0IHRva2VuID0gYXV0aEhlYWRlci5zcGxpdCgnICcpWzFdXHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGRlY29kZWQgPSBqd3QudmVyaWZ5KFxyXG4gICAgICB0b2tlbixcclxuICAgICAgcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCB8fCAnd29ya2x5LWxvY2FsLXNlY3JldC1rZXktMjAyNSdcclxuICAgICkgYXMgeyB1c2VySWQ6IHN0cmluZyB9XHJcbiAgICByZXR1cm4gZGVjb2RlZFxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICByZXR1cm4gbnVsbFxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihyZXE6IE5leHRBcGlSZXF1ZXN0LCByZXM6IE5leHRBcGlSZXNwb25zZSkge1xyXG4gIGlmIChyZXEubWV0aG9kICE9PSAnR0VUJykge1xyXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA1KS5qc29uKHsgZXJyb3I6ICdNZXRob2Qgbm90IGFsbG93ZWQnIH0pXHJcbiAgfVxyXG5cclxuICBjb25zdCB1c2VyID0gZ2V0VXNlckZyb21Ub2tlbihyZXEuaGVhZGVycy5hdXRob3JpemF0aW9uKVxyXG4gIGlmICghdXNlcikge1xyXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6ICdVbmF1dGhvcml6ZWQnIH0pXHJcbiAgfVxyXG5cclxuICB0cnkge1xyXG4gICAgY29uc3Qgd2FsbGV0ID0gYXdhaXQgd2FsbGV0U2VydmljZS5nZXRXYWxsZXRJbmZvKHVzZXIudXNlcklkKVxyXG4gICAgXHJcbiAgICBpZiAoIXdhbGxldCkge1xyXG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBcclxuICAgICAgICBlcnJvcjogJ1dhbGxldCBub3QgZm91bmQnLFxyXG4gICAgICAgIG5lZWRzQ3JlYXRpb246IHRydWVcclxuICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7XHJcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgIHdhbGxldDoge1xyXG4gICAgICAgIC4uLndhbGxldCxcclxuICAgICAgICBwcml2YXRlS2V5OiB1bmRlZmluZWQgLy8g0J3QtSDQvtGC0L/RgNCw0LLQu9GP0LXQvCDQv9GA0LjQstCw0YLQvdGL0Lkg0LrQu9GO0YdcclxuICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0dldCB3YWxsZXQgaW5mbyBlcnJvcjonLCBlcnJvcilcclxuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InIH0pXHJcbiAgfVxyXG59Il0sIm5hbWVzIjpbImp3dCIsIndhbGxldFNlcnZpY2UiLCJnZXRVc2VyRnJvbVRva2VuIiwiYXV0aEhlYWRlciIsInN0YXJ0c1dpdGgiLCJ0b2tlbiIsInNwbGl0IiwiZGVjb2RlZCIsInZlcmlmeSIsInByb2Nlc3MiLCJlbnYiLCJKV1RfU0VDUkVUIiwiZXJyb3IiLCJoYW5kbGVyIiwicmVxIiwicmVzIiwibWV0aG9kIiwic3RhdHVzIiwianNvbiIsInVzZXIiLCJoZWFkZXJzIiwiYXV0aG9yaXphdGlvbiIsIndhbGxldCIsImdldFdhbGxldEluZm8iLCJ1c2VySWQiLCJuZWVkc0NyZWF0aW9uIiwic3VjY2VzcyIsInByaXZhdGVLZXkiLCJ1bmRlZmluZWQiLCJjb25zb2xlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./pages/api/wallet/info.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/wallet/info.ts"));
module.exports = __webpack_exports__;

})();