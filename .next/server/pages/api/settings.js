"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/settings";
exports.ids = ["pages/api/settings"];
exports.modules = {

/***/ "jsonwebtoken":
/*!*******************************!*\
  !*** external "jsonwebtoken" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("jsonwebtoken");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./pages/api/settings.ts":
/*!*******************************!*\
  !*** ./pages/api/settings.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__);\n// pages/api/settings.ts\n\n\n\n// Пути к файлам\nconst getUsersFilePath = ()=>path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"users.json\");\nconst getSettingsFilePath = ()=>path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"settings.json\");\n// Функции для работы с файлами\nconst loadUsers = ()=>{\n    const filePath = getUsersFilePath();\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(filePath)) {\n        return [];\n    }\n    try {\n        const data = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(filePath, \"utf8\");\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error loading users:\", error);\n        return [];\n    }\n};\nconst loadSettings = ()=>{\n    const filePath = getSettingsFilePath();\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(filePath)) {\n        return [];\n    }\n    try {\n        const data = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(filePath, \"utf8\");\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error loading settings:\", error);\n        return [];\n    }\n};\nconst saveSettings = (settings)=>{\n    const filePath = getSettingsFilePath();\n    const dir = path__WEBPACK_IMPORTED_MODULE_1___default().dirname(filePath);\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(dir)) {\n        fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(dir, {\n            recursive: true\n        });\n    }\n    fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(filePath, JSON.stringify(settings, null, 2));\n};\n// Проверка токена\nconst verifyToken = (token)=>{\n    try {\n        const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_2___default().verify(token, process.env.JWT_SECRET || \"workly-local-secret-key-2025\");\n        return decoded;\n    } catch (error) {\n        return null;\n    }\n};\nconst getUserFromToken = (authHeader)=>{\n    if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n        return null;\n    }\n    const token = authHeader.split(\" \")[1];\n    const decoded = verifyToken(token);\n    if (!decoded) return null;\n    try {\n        const users = loadUsers();\n        const user = users.find((u)=>u.id === decoded.userId);\n        if (!user) return null;\n        return {\n            id: user.id,\n            username: user.username,\n            email: user.email,\n            createdAt: user.createdAt\n        };\n    } catch (error) {\n        return null;\n    }\n};\n// Создание дефолтных настроек\nconst createDefaultSettings = (user)=>{\n    return {\n        id: user.id,\n        email: user.email,\n        name: user.username || user.name || \"\",\n        username: user.username,\n        notifications: {\n            email: true,\n            push: true,\n            newTasks: true,\n            taskUpdates: true,\n            messages: true,\n            marketing: false\n        },\n        privacy: {\n            profileVisibility: \"public\",\n            showEmail: false,\n            showStats: true,\n            showCompletedTasks: true\n        },\n        preferences: {\n            theme: \"dark\",\n            language: \"en\",\n            timezone: \"UTC\",\n            currency: \"USD\"\n        },\n        createdAt: user.createdAt || new Date().toISOString()\n    };\n};\nasync function handler(req, res) {\n    const { method } = req;\n    // Проверяем аутентификацию\n    const currentUser = getUserFromToken(req.headers.authorization);\n    if (!currentUser) {\n        return res.status(401).json({\n            error: \"Unauthorized\",\n            message: \"Authentication required\"\n        });\n    }\n    if (method === \"GET\") {\n        try {\n            // Загружаем настройки\n            const allSettings = loadSettings();\n            let userSettings = allSettings.find((settings)=>settings.id === currentUser.id);\n            // Если настроек нет, создаем дефолтные\n            if (!userSettings) {\n                userSettings = createDefaultSettings(currentUser);\n                allSettings.push(userSettings);\n                saveSettings(allSettings);\n            }\n            res.status(200).json(userSettings);\n        } catch (error) {\n            console.error(\"Get settings error:\", error);\n            res.status(500).json({\n                error: \"Internal server error\",\n                message: \"Failed to get settings\"\n            });\n        }\n    } else if (method === \"PUT\") {\n        try {\n            // Обновляем настройки\n            const updates = req.body;\n            const allSettings = loadSettings();\n            const settingsIndex = allSettings.findIndex((settings)=>settings.id === currentUser.id);\n            // Валидация username на уникальность (если изменился)\n            if (updates.username) {\n                const users = loadUsers();\n                const existingUser = users.find((u)=>u.username === updates.username.toLowerCase() && u.id !== currentUser.id);\n                if (existingUser) {\n                    return res.status(400).json({\n                        error: \"Username already taken\",\n                        message: \"This username is already in use by another user\"\n                    });\n                }\n            }\n            if (settingsIndex === -1) {\n                // Создаем новые настройки если не существуют\n                const newSettings = {\n                    ...createDefaultSettings(currentUser),\n                    ...updates,\n                    id: currentUser.id,\n                    email: currentUser.email,\n                    updatedAt: new Date().toISOString()\n                };\n                allSettings.push(newSettings);\n                saveSettings(allSettings);\n                return res.status(201).json(newSettings);\n            } else {\n                // Обновляем существующие настройки\n                allSettings[settingsIndex] = {\n                    ...allSettings[settingsIndex],\n                    ...updates,\n                    id: currentUser.id,\n                    email: currentUser.email,\n                    updatedAt: new Date().toISOString()\n                };\n                saveSettings(allSettings);\n                // Если обновился username, нужно также обновить его в users.json\n                if (updates.username && updates.username !== currentUser.username) {\n                    const users = loadUsers();\n                    const userIndex = users.findIndex((u)=>u.id === currentUser.id);\n                    if (userIndex !== -1) {\n                        users[userIndex].username = updates.username.toLowerCase();\n                        const usersFilePath = getUsersFilePath();\n                        fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(usersFilePath, JSON.stringify(users, null, 2));\n                    }\n                }\n                res.status(200).json(allSettings[settingsIndex]);\n            }\n        } catch (error) {\n            console.error(\"Update settings error:\", error);\n            res.status(500).json({\n                error: \"Internal server error\",\n                message: \"Failed to update settings\"\n            });\n        }\n    } else if (method === \"DELETE\") {\n        try {\n            // Удалить аккаунт пользователя\n            const { confirmPassword } = req.body;\n            if (!confirmPassword || confirmPassword !== \"DELETE_MY_ACCOUNT\") {\n                return res.status(400).json({\n                    error: 'Please type \"DELETE_MY_ACCOUNT\" to confirm account deletion'\n                });\n            }\n            // Удаляем все данные пользователя из всех файлов\n            const userId = currentUser.id;\n            // Удаляем из users.json\n            const users = loadUsers();\n            const filteredUsers = users.filter((u)=>u.id !== userId);\n            fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(getUsersFilePath(), JSON.stringify(filteredUsers, null, 2));\n            // Удаляем из settings.json\n            const allSettings = loadSettings();\n            const filteredSettings = allSettings.filter((s)=>s.id !== userId);\n            saveSettings(filteredSettings);\n            // Удаляем из других файлов если они существуют\n            const dataDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\");\n            const filesToCheck = [\n                \"profiles.json\",\n                \"tasks.json\",\n                \"applications.json\",\n                \"messages.json\",\n                \"notifications.json\"\n            ];\n            filesToCheck.forEach((fileName)=>{\n                const filePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(dataDir, fileName);\n                if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(filePath)) {\n                    try {\n                        const data = JSON.parse(fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(filePath, \"utf8\"));\n                        let filteredData;\n                        switch(fileName){\n                            case \"tasks.json\":\n                                filteredData = data.filter((item)=>item.createdBy !== userId);\n                                break;\n                            case \"applications.json\":\n                                filteredData = data.filter((item)=>item.userId !== userId);\n                                break;\n                            case \"messages.json\":\n                                filteredData = data.filter((item)=>item.senderId !== userId && item.receiverId !== userId);\n                                break;\n                            case \"notifications.json\":\n                                filteredData = data.filter((item)=>item.userId !== userId);\n                                break;\n                            default:\n                                filteredData = data.filter((item)=>item.id !== userId);\n                        }\n                        fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(filePath, JSON.stringify(filteredData, null, 2));\n                    } catch (error) {\n                        console.error(`Error cleaning ${fileName}:`, error);\n                    }\n                }\n            });\n            res.status(200).json({\n                success: true,\n                message: \"Account deleted successfully\"\n            });\n        } catch (error) {\n            console.error(\"Delete account error:\", error);\n            res.status(500).json({\n                error: \"Internal server error\",\n                message: \"Failed to delete account\"\n            });\n        }\n    } else {\n        res.status(405).json({\n            error: \"Method not allowed\",\n            message: `Method ${method} is not supported`\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/settings.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/settings.ts"));
module.exports = __webpack_exports__;

})();