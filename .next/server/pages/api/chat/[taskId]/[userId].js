"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/chat/[taskId]/[userId]";
exports.ids = ["pages/api/chat/[taskId]/[userId]"];
exports.modules = {

/***/ "jsonwebtoken":
/*!*******************************!*\
  !*** external "jsonwebtoken" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("jsonwebtoken");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./pages/api/chat/[taskId]/[userId].ts":
/*!*********************************************!*\
  !*** ./pages/api/chat/[taskId]/[userId].ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__);\n// pages/api/chat/[taskId]/[userId].ts\n\n\n\n// Пути к файлам\nconst getChatsFilePath = ()=>path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"chats.json\");\nconst getTasksFilePath = ()=>path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"tasks.json\");\nconst getUsersFilePath = ()=>path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"users.json\");\n// Функции для работы с файлами\nconst loadChats = ()=>{\n    const filePath = getChatsFilePath();\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(filePath)) {\n        return [];\n    }\n    try {\n        const data = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(filePath, \"utf8\");\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error loading chats:\", error);\n        return [];\n    }\n};\nconst saveChats = (chats)=>{\n    const filePath = getChatsFilePath();\n    const dir = path__WEBPACK_IMPORTED_MODULE_1___default().dirname(filePath);\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(dir)) {\n        fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(dir, {\n            recursive: true\n        });\n    }\n    fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(filePath, JSON.stringify(chats, null, 2));\n};\nconst loadTasks = ()=>{\n    const filePath = getTasksFilePath();\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(filePath)) {\n        return [];\n    }\n    try {\n        const data = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(filePath, \"utf8\");\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error loading tasks:\", error);\n        return [];\n    }\n};\nconst loadUsers = ()=>{\n    const filePath = getUsersFilePath();\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(filePath)) {\n        return [];\n    }\n    try {\n        const data = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(filePath, \"utf8\");\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error loading users:\", error);\n        return [];\n    }\n};\n// Проверка токена\nconst verifyToken = (token)=>{\n    try {\n        const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_2___default().verify(token, process.env.JWT_SECRET || \"workly-local-secret-key-2025\");\n        return decoded;\n    } catch (error) {\n        return null;\n    }\n};\nconst getUserFromToken = (authHeader)=>{\n    if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n        return null;\n    }\n    const token = authHeader.split(\" \")[1];\n    const decoded = verifyToken(token);\n    if (!decoded) return null;\n    try {\n        const users = loadUsers();\n        const user = users.find((u)=>u.id === decoded.userId);\n        if (!user) return null;\n        return {\n            id: user.id,\n            username: user.username,\n            email: user.email\n        };\n    } catch (error) {\n        return null;\n    }\n};\n// Создание ID чата\nconst createChatId = (taskId, clientId, freelancerId)=>{\n    return `chat_${taskId}_${clientId}_${freelancerId}`;\n};\nasync function handler(req, res) {\n    const { method } = req;\n    const { taskId, userId } = req.query;\n    const { message, fileUrl, fileName, fileType } = req.body;\n    if (!taskId || !userId || typeof taskId !== \"string\" || typeof userId !== \"string\") {\n        console.log(\"❌ Validation failed - returning 400\");\n        return res.status(400).json({\n            error: \"Bad Request\",\n            message: \"Task ID and User ID are required\"\n        });\n    }\n    // Проверяем аутентификацию\n    const currentUser = getUserFromToken(req.headers.authorization || \"\");\n    if (!currentUser) {\n        console.log(\"❌ Authentication failed - returning 401\");\n        return res.status(401).json({\n            error: \"Unauthorized\",\n            message: \"Authentication required\"\n        });\n    }\n    console.log(\"✅ Validation passed, user:\", currentUser.id);\n    if (method === \"GET\") {\n        try {\n            // Загружаем задачу для получения информации\n            const tasks = loadTasks();\n            const task = tasks.find((t)=>t.id === taskId);\n            if (!task) {\n                return res.status(404).json({\n                    error: \"Not Found\",\n                    message: \"Task not found\"\n                });\n            }\n            // Определяем участников чата\n            let clientId = task.createdBy;\n            let freelancerId = userId;\n            // Если текущий пользователь - создатель задачи, то userId - это фрилансер\n            if (currentUser.id === task.createdBy) {\n                clientId = task.createdBy;\n                freelancerId = userId;\n            } else {\n                // Если текущий пользователь - фрилансер, то userId должен быть создателем задачи\n                clientId = userId;\n                freelancerId = currentUser.id;\n            }\n            // Проверяем права доступа\n            if (currentUser.id !== clientId && currentUser.id !== freelancerId) {\n                return res.status(403).json({\n                    error: \"Forbidden\",\n                    message: \"You are not authorized to access this chat\"\n                });\n            }\n            // Загружаем чаты\n            const chats = loadChats();\n            const chatId = createChatId(taskId, clientId, freelancerId);\n            let chat = chats.find((c)=>c.id === chatId);\n            // Если чат не существует, создаем новый\n            if (!chat) {\n                chat = {\n                    id: chatId,\n                    taskId,\n                    clientId,\n                    freelancerId,\n                    createdAt: new Date().toISOString(),\n                    lastMessageAt: new Date().toISOString(),\n                    messages: []\n                };\n                chats.push(chat);\n                saveChats(chats);\n            }\n            // Получаем информацию о пользователях\n            const users = loadUsers();\n            const clientUser = users.find((u)=>u.id === clientId);\n            const freelancerUser = users.find((u)=>u.id === freelancerId);\n            res.status(200).json({\n                success: true,\n                chat,\n                task: {\n                    id: task.id,\n                    title: task.title,\n                    status: task.status,\n                    workerConfirmed: task.workerConfirmed || false,\n                    clientConfirmed: task.clientConfirmed || false,\n                    assignedTo: task.assignedTo || null,\n                    createdBy: task.createdBy || null,\n                    reward: task.reward || 0\n                },\n                participants: {\n                    client: clientUser ? {\n                        id: clientUser.id,\n                        username: clientUser.username,\n                        email: clientUser.email\n                    } : null,\n                    freelancer: freelancerUser ? {\n                        id: freelancerUser.id,\n                        username: freelancerUser.username,\n                        email: freelancerUser.email\n                    } : null\n                },\n                currentUserId: currentUser.id\n            });\n        } catch (error) {\n            console.error(\"Get chat error:\", error);\n            res.status(500).json({\n                error: \"Internal server error\",\n                message: \"Failed to get chat\"\n            });\n        }\n    } else if (method === \"POST\") {\n        try {\n            const { message } = req.body;\n            if (!message || !message.trim()) {\n                return res.status(400).json({\n                    error: \"Bad Request\",\n                    message: \"Message text is required\"\n                });\n            }\n            // Загружаем задачу\n            const tasks = loadTasks();\n            const task = tasks.find((t)=>t.id === taskId);\n            if (!task) {\n                return res.status(404).json({\n                    error: \"Not Found\",\n                    message: \"Task not found\"\n                });\n            }\n            // Определяем участников чата\n            let clientId = task.createdBy;\n            let freelancerId = userId;\n            if (currentUser.id === task.createdBy) {\n                clientId = task.createdBy;\n                freelancerId = userId;\n            } else {\n                clientId = userId;\n                freelancerId = currentUser.id;\n            }\n            // Проверяем права доступа\n            if (currentUser.id !== clientId && currentUser.id !== freelancerId) {\n                return res.status(403).json({\n                    error: \"Forbidden\",\n                    message: \"You are not authorized to send messages in this chat\"\n                });\n            }\n            // Загружаем чаты\n            const chats = loadChats();\n            const chatId = createChatId(taskId, clientId, freelancerId);\n            let chat = chats.find((c)=>c.id === chatId);\n            const chatIndex = chats.findIndex((c)=>c.id === chatId);\n            // Если чат не существует, создаем его\n            if (!chat) {\n                chat = {\n                    id: chatId,\n                    taskId,\n                    clientId,\n                    freelancerId,\n                    createdAt: new Date().toISOString(),\n                    lastMessageAt: new Date().toISOString(),\n                    messages: []\n                };\n                chats.push(chat);\n            }\n            // Создаем новое сообщение\n            const newMessage = {\n                id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n                senderId: currentUser.id,\n                text: message,\n                timestamp: new Date().toISOString(),\n                status: \"sent\",\n                // Добавляем поддержку файлов\n                ...fileUrl && {\n                    fileUrl,\n                    fileName,\n                    fileType\n                }\n            };\n            // Добавляем сообщение в чат\n            if (chatIndex >= 0) {\n                chats[chatIndex].messages.push(newMessage);\n                chats[chatIndex].lastMessageAt = newMessage.timestamp;\n            } else {\n                chat.messages.push(newMessage);\n                chat.lastMessageAt = newMessage.timestamp;\n                chats.push(chat);\n            }\n            // Сохраняем изменения\n            saveChats(chats);\n            res.status(201).json({\n                success: true,\n                message: newMessage,\n                chat: chats[chatIndex >= 0 ? chatIndex : chats.length - 1]\n            });\n        } catch (error) {\n            console.error(\"Send message error:\", error);\n            res.status(500).json({\n                error: \"Internal server error\",\n                message: \"Failed to send message\"\n            });\n        }\n    } else {\n        res.status(405).json({\n            error: \"Method not allowed\",\n            message: `Method ${method} is not supported`\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/chat/[taskId]/[userId].ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/chat/[taskId]/[userId].ts"));
module.exports = __webpack_exports__;

})();