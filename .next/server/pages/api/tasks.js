"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/tasks";
exports.ids = ["pages/api/tasks"];
exports.modules = {

/***/ "jsonwebtoken":
/*!*******************************!*\
  !*** external "jsonwebtoken" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("jsonwebtoken");

/***/ }),

/***/ "zod":
/*!**********************!*\
  !*** external "zod" ***!
  \**********************/
/***/ ((module) => {

module.exports = import("zod");;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./pages/api/tasks/index.ts":
/*!**********************************!*\
  !*** ./pages/api/tasks/index.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"zod\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_3__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([zod__WEBPACK_IMPORTED_MODULE_1__]);\nzod__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// pages/api/tasks/index.ts - С автоматическим возвратом денег и удалением просроченных задач\n\n\n\n\n// Валидация для создания задачи\nconst createTaskSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    title: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().min(5, \"Title must be at least 5 characters\").max(100, \"Title too long\"),\n    description: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().min(10, \"Description must be at least 10 characters\").max(2000, \"Description too long\"),\n    reward: zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n        amount: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().positive(\"Reward amount must be positive\"),\n        token: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().min(1, \"Token is required\")\n    }),\n    deadline: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().refine((val)=>!isNaN(Date.parse(val)), {\n        message: \"Invalid deadline format\"\n    }),\n    tags: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(zod__WEBPACK_IMPORTED_MODULE_1__.z.string()).optional(),\n    isUrgent: zod__WEBPACK_IMPORTED_MODULE_1__.z.boolean().optional(),\n    requirements: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(zod__WEBPACK_IMPORTED_MODULE_1__.z.string()).optional()\n});\n// Пути к файлам данных\nconst getTasksFilePath = ()=>path__WEBPACK_IMPORTED_MODULE_3___default().join(process.cwd(), \"data\", \"tasks.json\");\nconst getUsersFilePath = ()=>path__WEBPACK_IMPORTED_MODULE_3___default().join(process.cwd(), \"data\", \"users.json\");\nconst getEscrowAccountsFilePath = ()=>path__WEBPACK_IMPORTED_MODULE_3___default().join(process.cwd(), \"data\", \"escrow_accounts.json\");\nconst getPendingEscrowsFilePath = ()=>path__WEBPACK_IMPORTED_MODULE_3___default().join(process.cwd(), \"data\", \"pending_escrows.json\");\nconst getWalletTransactionsFilePath = ()=>path__WEBPACK_IMPORTED_MODULE_3___default().join(process.cwd(), \"data\", \"wallet_transactions.json\");\nconst getWalletsFilePath = ()=>path__WEBPACK_IMPORTED_MODULE_3___default().join(process.cwd(), \"data\", \"wallets.json\");\n// Создаем папку data если её нет\nconst ensureDataDir = ()=>{\n    const dataDir = path__WEBPACK_IMPORTED_MODULE_3___default().join(process.cwd(), \"data\");\n    if (!fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(dataDir)) {\n        fs__WEBPACK_IMPORTED_MODULE_2___default().mkdirSync(dataDir, {\n            recursive: true\n        });\n    }\n};\n// Функции для работы с файлами\nconst loadTasks = ()=>{\n    ensureDataDir();\n    const filePath = getTasksFilePath();\n    if (!fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(filePath)) return [];\n    try {\n        const data = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(filePath, \"utf8\");\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error loading tasks:\", error);\n        return [];\n    }\n};\nconst saveTasks = (tasks)=>{\n    ensureDataDir();\n    const filePath = getTasksFilePath();\n    try {\n        fs__WEBPACK_IMPORTED_MODULE_2___default().writeFileSync(filePath, JSON.stringify(tasks, null, 2));\n    } catch (error) {\n        console.error(\"Error saving tasks:\", error);\n        throw new Error(\"Failed to save task data\");\n    }\n};\nconst loadEscrowAccounts = ()=>{\n    ensureDataDir();\n    const filePath = getEscrowAccountsFilePath();\n    if (!fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(filePath)) return [];\n    try {\n        const data = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(filePath, \"utf8\");\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error loading escrow accounts:\", error);\n        return [];\n    }\n};\nconst saveEscrowAccounts = (escrows)=>{\n    ensureDataDir();\n    const filePath = getEscrowAccountsFilePath();\n    try {\n        fs__WEBPACK_IMPORTED_MODULE_2___default().writeFileSync(filePath, JSON.stringify(escrows, null, 2));\n    } catch (error) {\n        console.error(\"Error saving escrow accounts:\", error);\n        throw new Error(\"Failed to save escrow data\");\n    }\n};\nconst loadPendingEscrows = ()=>{\n    ensureDataDir();\n    const filePath = getPendingEscrowsFilePath();\n    if (!fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(filePath)) return [];\n    try {\n        const data = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(filePath, \"utf8\");\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error loading pending escrows:\", error);\n        return [];\n    }\n};\nconst savePendingEscrows = (escrows)=>{\n    ensureDataDir();\n    const filePath = getPendingEscrowsFilePath();\n    try {\n        fs__WEBPACK_IMPORTED_MODULE_2___default().writeFileSync(filePath, JSON.stringify(escrows, null, 2));\n    } catch (error) {\n        console.error(\"Error saving pending escrows:\", error);\n        throw new Error(\"Failed to save pending escrow data\");\n    }\n};\nconst loadWallets = ()=>{\n    ensureDataDir();\n    const filePath = getWalletsFilePath();\n    if (!fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(filePath)) return [];\n    try {\n        const data = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(filePath, \"utf8\");\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error loading wallets:\", error);\n        return [];\n    }\n};\nconst saveWallets = (wallets)=>{\n    ensureDataDir();\n    const filePath = getWalletsFilePath();\n    try {\n        fs__WEBPACK_IMPORTED_MODULE_2___default().writeFileSync(filePath, JSON.stringify(wallets, null, 2));\n    } catch (error) {\n        console.error(\"Error saving wallets:\", error);\n        throw new Error(\"Failed to save wallet data\");\n    }\n};\nconst loadWalletTransactions = ()=>{\n    ensureDataDir();\n    const filePath = getWalletTransactionsFilePath();\n    if (!fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(filePath)) return [];\n    try {\n        const data = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(filePath, \"utf8\");\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error loading wallet transactions:\", error);\n        return [];\n    }\n};\nconst saveWalletTransactions = (transactions)=>{\n    ensureDataDir();\n    const filePath = getWalletTransactionsFilePath();\n    try {\n        fs__WEBPACK_IMPORTED_MODULE_2___default().writeFileSync(filePath, JSON.stringify(transactions, null, 2));\n    } catch (error) {\n        console.error(\"Error saving wallet transactions:\", error);\n        throw new Error(\"Failed to save transaction data\");\n    }\n};\nconst loadUsers = ()=>{\n    const filePath = getUsersFilePath();\n    if (!fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(filePath)) return [];\n    try {\n        const data = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(filePath, \"utf8\");\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error loading users:\", error);\n        return [];\n    }\n};\n// 🎯 ФУНКЦИЯ ВОЗВРАТА ДЕНЕГ С ESCROW\nconst refundMoneyFromEscrow = async (taskId, clientId)=>{\n    try {\n        console.log(`💰 Starting refund process for task ${taskId}`);\n        // Ищем escrow в активных аккаунтах\n        let escrowAccounts = loadEscrowAccounts();\n        let pendingEscrows = loadPendingEscrows();\n        let wallets = loadWallets();\n        let transactions = loadWalletTransactions();\n        // Найти escrow для данной задачи\n        const escrowIndex = escrowAccounts.findIndex((escrow)=>escrow.taskId === taskId && escrow.status === \"funded\");\n        const pendingIndex = pendingEscrows.findIndex((escrow)=>escrow.taskId === taskId || escrow.taskData && escrow.taskData.createdBy === clientId);\n        let refundAmount = 0;\n        let refundToken = \"\";\n        let escrowToRemove = null;\n        // Обработка активного escrow (со статусом 'funded')\n        if (escrowIndex !== -1) {\n            const escrow = escrowAccounts[escrowIndex];\n            refundAmount = escrow.amount // Возвращаем полную сумму заказчику\n            ;\n            refundToken = escrow.token;\n            escrowToRemove = escrow;\n            console.log(`💸 Found funded escrow: ${refundAmount} ${refundToken}`);\n            // Удаляем escrow из активных\n            escrowAccounts.splice(escrowIndex, 1);\n            saveEscrowAccounts(escrowAccounts);\n        } else if (pendingIndex !== -1) {\n            const pendingEscrow = pendingEscrows[pendingIndex];\n            refundAmount = pendingEscrow.amount || pendingEscrow.taskData?.reward?.amount || 0;\n            refundToken = pendingEscrow.token || pendingEscrow.taskData?.reward?.token || \"SOL\";\n            escrowToRemove = pendingEscrow;\n            console.log(`⏳ Found pending escrow: ${refundAmount} ${refundToken}`);\n            // Удаляем из pending (деньги еще не были списаны)\n            pendingEscrows.splice(pendingIndex, 1);\n            savePendingEscrows(pendingEscrows);\n        }\n        // Если найден escrow для возврата\n        if (escrowToRemove && refundAmount > 0) {\n            // Находим кошелек пользователя\n            const walletIndex = wallets.findIndex((wallet)=>wallet.userId === clientId);\n            if (walletIndex !== -1) {\n                const wallet = wallets[walletIndex];\n                // Возвращаем деньги на баланс пользователя\n                switch(refundToken.toUpperCase()){\n                    case \"SOL\":\n                        wallet.solBalance += refundAmount;\n                        break;\n                    case \"USDT\":\n                        wallet.usdtBalance += refundAmount;\n                        break;\n                    case \"USDC\":\n                        wallet.usdcBalance += refundAmount;\n                        break;\n                    case \"WORKLY\":\n                        wallet.worklyBalance += refundAmount;\n                        break;\n                    default:\n                        console.warn(`Unknown token type: ${refundToken}`);\n                        return false;\n                }\n                wallet.lastUpdated = new Date().toISOString();\n                // Сохраняем обновленный кошелек\n                saveWallets(wallets);\n                // Записываем транзакцию возврата\n                const refundTransaction = {\n                    id: Date.now().toString(),\n                    type: \"task_refund\",\n                    userId: clientId,\n                    taskId: taskId,\n                    escrowAddress: escrowToRemove.escrowAddress,\n                    amount: refundAmount,\n                    token: refundToken,\n                    timestamp: new Date().toISOString(),\n                    description: `Refund for expired/deleted task ${taskId}`\n                };\n                transactions.push(refundTransaction);\n                saveWalletTransactions(transactions);\n                console.log(`✅ Successfully refunded ${refundAmount} ${refundToken} to user ${clientId}`);\n                return true;\n            } else {\n                console.error(`❌ Wallet not found for user ${clientId}`);\n                return false;\n            }\n        } else {\n            console.log(`ℹ️ No escrow found for task ${taskId} - no refund needed`);\n            return true // Не ошибка, просто нет escrow для возврата\n            ;\n        }\n    } catch (error) {\n        console.error(\"❌ Error during refund process:\", error);\n        return false;\n    }\n};\n// 🎯 АВТОМАТИЧЕСКОЕ ОБНОВЛЕНИЕ И УДАЛЕНИЕ ПРОСРОЧЕННЫХ ЗАДАЧ С ВОЗВРАТОМ ДЕНЕГ\nconst updateAndCleanupExpiredTasks = async (tasks)=>{\n    const now = new Date();\n    let hasChanges = false;\n    let deletedCount = 0;\n    let refundedCount = 0;\n    const tasksToKeep = [];\n    for (const task of tasks){\n        // Если задача открыта, но дедлайн прошел\n        if (task.status === \"open\" && new Date(task.deadline) <= now) {\n            console.log(`🕒 Task ${task.id} expired, processing refund and deletion...`);\n            // Пытаемся вернуть деньги\n            const refundSuccess = await refundMoneyFromEscrow(task.id, task.createdBy);\n            if (refundSuccess) {\n                refundedCount++;\n                console.log(`✅ Refund completed for task ${task.id}`);\n            } else {\n                console.warn(`⚠️ Refund failed for task ${task.id}`);\n            }\n            // Удаляем задачу (не сохраняем в tasksToKeep)\n            deletedCount++;\n            hasChanges = true;\n            console.log(`🗑️ Task ${task.id} deleted`);\n        } else {\n            // Задача остается\n            tasksToKeep.push(task);\n        }\n    }\n    if (hasChanges) {\n        console.log(`🧹 Cleanup complete: ${deletedCount} tasks deleted, ${refundedCount} refunds processed`);\n    }\n    return {\n        updatedTasks: tasksToKeep,\n        hasChanges,\n        deletedCount,\n        refundedCount\n    };\n};\n// 🎯 ФИЛЬТРАЦИЯ ТОЛЬКО АКТУАЛЬНЫХ ЗАДАЧ ДЛЯ ПУБЛИЧНОГО ПРОСМОТРА\nconst getPublicTasks = (tasks, currentUserId)=>{\n    return tasks;\n};\n// Проверка токена и получение пользователя\nconst getUserFromToken = (authHeader)=>{\n    if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n        return null;\n    }\n    const token = authHeader.split(\" \")[1];\n    try {\n        const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default().verify(token, process.env.JWT_SECRET || \"workly-local-secret-key-2025\");\n        const users = loadUsers();\n        const user = users.find((u)=>u.id === decoded.userId);\n        if (!user) return null;\n        return {\n            id: user.id,\n            username: user.username,\n            email: user.email\n        };\n    } catch (error) {\n        return null;\n    }\n};\nasync function handler(req, res) {\n    const { method } = req;\n    if (method === \"GET\") {\n        // Получение списка задач\n        try {\n            // Загружаем все задачи\n            let tasks = loadTasks();\n            // 🎯 АВТОМАТИЧЕСКИ ОБНОВЛЯЕМ И УДАЛЯЕМ ПРОСРОЧЕННЫЕ ЗАДАЧИ С ВОЗВРАТОМ ДЕНЕГ\n            const { updatedTasks, hasChanges, deletedCount, refundedCount } = await updateAndCleanupExpiredTasks(tasks);\n            tasks = updatedTasks;\n            // Сохраняем изменения если есть обновления\n            if (hasChanges) {\n                saveTasks(tasks);\n                console.log(`✅ Cleanup completed: ${deletedCount} expired tasks deleted, ${refundedCount} refunds processed`);\n            }\n            // 🎯 ФИЛЬТРУЕМ ТОЛЬКО АКТУАЛЬНЫЕ ЗАДАЧИ ДЛЯ ПУБЛИЧНОГО ПРОСМОТРА\n            const publicTasks = getPublicTasks(tasks);\n            // Сортируем по дате создания (новые первыми)\n            publicTasks.sort((a, b)=>new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n            res.status(200).json({\n                success: true,\n                tasks: publicTasks,\n                total: publicTasks.length,\n                totalAll: tasks.length,\n                cleanup: {\n                    deletedTasks: deletedCount,\n                    refundsProcessed: refundedCount\n                }\n            });\n        } catch (error) {\n            console.error(\"Get tasks error:\", error);\n            res.status(500).json({\n                error: \"Internal server error\",\n                message: \"Failed to get tasks\"\n            });\n        }\n    } else if (method === \"POST\") {\n        // Создание новой задачи\n        try {\n            // Проверяем аутентификацию\n            const user = getUserFromToken(req.headers.authorization);\n            if (!user) {\n                return res.status(401).json({\n                    error: \"Unauthorized\",\n                    message: \"Authentication required to create tasks\"\n                });\n            }\n            console.log(\"\\uD83D\\uDD25 req.body =\", req.body);\n            // Валидация данных\n            const validation = createTaskSchema.safeParse(req.body);\n            if (!validation.success) {\n                console.error(\"❌ Zod validation error:\", validation.error.errors);\n                return res.status(400).json({\n                    error: \"Validation failed\",\n                    details: validation.error.errors\n                });\n            }\n            const taskData = validation.data;\n            // Проверяем что deadline в будущем\n            const deadlineDate = new Date(taskData.deadline);\n            if (deadlineDate <= new Date()) {\n                return res.status(400).json({\n                    error: \"Invalid deadline\",\n                    message: \"Deadline must be in the future\"\n                });\n            }\n            // Создаем новую задачу\n            const newTask = {\n                id: Date.now().toString(),\n                title: taskData.title.trim(),\n                description: taskData.description.trim(),\n                reward: taskData.reward,\n                deadline: taskData.deadline,\n                tags: taskData.tags || [],\n                isUrgent: taskData.isUrgent || false,\n                requirements: Array.isArray(taskData.requirements) ? taskData.requirements : [],\n                status: \"open\",\n                createdBy: user.id,\n                createdByUsername: user.username,\n                assignedTo: null,\n                applicants: [],\n                applicationCount: 0,\n                viewCount: 0,\n                createdAt: new Date().toISOString(),\n                updatedAt: new Date().toISOString()\n            };\n            // Загружаем существующие задачи и добавляем новую\n            const tasks = loadTasks();\n            tasks.push(newTask);\n            saveTasks(tasks);\n            res.status(201).json({\n                success: true,\n                message: \"Task created successfully\",\n                task: newTask\n            });\n        } catch (error) {\n            console.error(\"Create task error:\", error);\n            res.status(500).json({\n                error: \"Internal server error\",\n                message: \"Failed to create task\"\n            });\n        }\n    } else {\n        // Метод не поддерживается\n        res.status(405).json({\n            error: \"Method not allowed\",\n            message: `Method ${method} is not supported on this endpoint`\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/tasks/index.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/tasks/index.ts"));
module.exports = __webpack_exports__;

})();