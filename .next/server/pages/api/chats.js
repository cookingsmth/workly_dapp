"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/chats";
exports.ids = ["pages/api/chats"];
exports.modules = {

/***/ "jsonwebtoken":
/*!*******************************!*\
  !*** external "jsonwebtoken" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("jsonwebtoken");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./pages/api/chats.ts":
/*!****************************!*\
  !*** ./pages/api/chats.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__);\n// pages/api/chats.ts\n\n\n\n// Пути к файлам\nconst getChatsFilePath = ()=>path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"chats.json\");\nconst getTasksFilePath = ()=>path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"tasks.json\");\nconst getUsersFilePath = ()=>path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"users.json\");\n// Функции для работы с файлами\nconst loadChats = ()=>{\n    const filePath = getChatsFilePath();\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(filePath)) {\n        return [];\n    }\n    try {\n        const data = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(filePath, \"utf8\");\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error loading chats:\", error);\n        return [];\n    }\n};\nconst loadTasks = ()=>{\n    const filePath = getTasksFilePath();\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(filePath)) {\n        return [];\n    }\n    try {\n        const data = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(filePath, \"utf8\");\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error loading tasks:\", error);\n        return [];\n    }\n};\nconst loadUsers = ()=>{\n    const filePath = getUsersFilePath();\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(filePath)) {\n        return [];\n    }\n    try {\n        const data = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(filePath, \"utf8\");\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error loading users:\", error);\n        return [];\n    }\n};\n// Проверка токена\nconst verifyToken = (token)=>{\n    try {\n        const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_2___default().verify(token, process.env.JWT_SECRET || \"workly-local-secret-key-2025\");\n        return decoded;\n    } catch (error) {\n        return null;\n    }\n};\nconst getUserFromToken = (authHeader)=>{\n    if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n        return null;\n    }\n    const token = authHeader.split(\" \")[1];\n    const decoded = verifyToken(token);\n    if (!decoded) return null;\n    try {\n        const users = loadUsers();\n        const user = users.find((u)=>u.id === decoded.userId);\n        if (!user) return null;\n        return {\n            id: user.id,\n            username: user.username,\n            email: user.email\n        };\n    } catch (error) {\n        return null;\n    }\n};\nasync function handler(req, res) {\n    const { method } = req;\n    // Проверяем аутентификацию\n    const currentUser = getUserFromToken(req.headers.authorization);\n    if (!currentUser) {\n        return res.status(401).json({\n            error: \"Unauthorized\",\n            message: \"Authentication required\"\n        });\n    }\n    if (method === \"GET\") {\n        try {\n            // Загружаем данные\n            const chats = loadChats();\n            const tasks = loadTasks();\n            const users = loadUsers();\n            // Фильтруем чаты для текущего пользователя\n            const userChats = chats.filter((chat)=>chat.clientId === currentUser.id || chat.freelancerId === currentUser.id);\n            // Создаем превью чатов\n            const chatPreviews = userChats.map((chat)=>{\n                // Определяем участника (не текущего пользователя)\n                const participantId = chat.clientId === currentUser.id ? chat.freelancerId : chat.clientId;\n                const participant = users.find((u)=>u.id === participantId);\n                const task = tasks.find((t)=>t.id === chat.taskId);\n                // Последнее сообщение\n                const lastMessage = chat.messages.length > 0 ? chat.messages[chat.messages.length - 1] : null;\n                // Подсчет непрочитанных сообщений\n                const unreadCount = chat.messages.filter((msg)=>msg.senderId !== currentUser.id && msg.status !== \"read\").length;\n                return {\n                    id: chat.id,\n                    taskId: chat.taskId,\n                    taskTitle: task?.title || \"Unknown Task\",\n                    participantId,\n                    participantName: participant?.username || \"Unknown User\",\n                    participantEmail: participant?.email || \"\",\n                    lastMessage: lastMessage ? {\n                        text: lastMessage.text,\n                        timestamp: lastMessage.timestamp,\n                        senderId: lastMessage.senderId\n                    } : null,\n                    unreadCount,\n                    lastActivity: chat.lastMessageAt\n                };\n            });\n            // Сортируем по последней активности\n            chatPreviews.sort((a, b)=>new Date(b.lastActivity).getTime() - new Date(a.lastActivity).getTime());\n            res.status(200).json({\n                success: true,\n                chats: chatPreviews\n            });\n        } catch (error) {\n            console.error(\"Get chats error:\", error);\n            res.status(500).json({\n                error: \"Internal server error\",\n                message: \"Failed to get chats\"\n            });\n        }\n    } else {\n        res.status(405).json({\n            error: \"Method not allowed\",\n            message: `Method ${method} is not supported`\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/chats.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/chats.ts"));
module.exports = __webpack_exports__;

})();